{"version":3,"sources":["../../src/drivers/sqlite.ts"],"sourcesContent":["import { eq, lte } from \"drizzle-orm\";\n\nimport type { Adapter, DatabaseSession, DatabaseUser } from \"lucia\";\nimport type {\n\tSQLiteColumn,\n\tBaseSQLiteDatabase,\n\tSQLiteTableWithColumns\n} from \"drizzle-orm/sqlite-core\";\nimport type { InferSelectModel } from \"drizzle-orm\";\n\nexport class DrizzleSQLiteAdapter implements Adapter {\n\tprivate db: BaseSQLiteDatabase<\"async\" | \"sync\", {}>;\n\n\tprivate sessionTable: SQLiteSessionTable;\n\tprivate userTable: SQLiteUserTable;\n\n\tconstructor(\n\t\tdb: BaseSQLiteDatabase<any, any, any>,\n\t\tsessionTable: SQLiteSessionTable,\n\t\tuserTable: SQLiteUserTable\n\t) {\n\t\tthis.db = db;\n\t\tthis.sessionTable = sessionTable;\n\t\tthis.userTable = userTable;\n\t}\n\n\tpublic async deleteSession(sessionId: string): Promise<void> {\n\t\tawait this.db.delete(this.sessionTable).where(eq(this.sessionTable.id, sessionId));\n\t}\n\n\tpublic async deleteUserSessions(userId: string): Promise<void> {\n\t\tawait this.db.delete(this.sessionTable).where(eq(this.sessionTable.userId, userId));\n\t}\n\n\tpublic async getSessionAndUser(\n\t\tsessionId: string\n\t): Promise<[session: DatabaseSession | null, user: DatabaseUser | null]> {\n\t\tconst result = await this.db\n\t\t\t.select({\n\t\t\t\tuser: this.userTable,\n\t\t\t\tsession: this.sessionTable\n\t\t\t})\n\t\t\t.from(this.sessionTable)\n\t\t\t.innerJoin(this.userTable, eq(this.sessionTable.userId, this.userTable.id))\n\t\t\t.where(eq(this.sessionTable.id, sessionId))\n\t\t\t.get();\n\t\tif (!result) return [null, null];\n\t\treturn [\n\t\t\ttransformIntoDatabaseSession(result.session),\n\t\t\ttransformIntoDatabaseUser(result.user)\n\t\t];\n\t}\n\n\tpublic async getUserSessions(userId: string): Promise<DatabaseSession[]> {\n\t\tconst result = await this.db\n\t\t\t.select()\n\t\t\t.from(this.sessionTable)\n\t\t\t.where(eq(this.sessionTable.userId, userId))\n\t\t\t.all();\n\t\treturn result.map((val) => {\n\t\t\treturn transformIntoDatabaseSession(val);\n\t\t});\n\t}\n\n\tpublic async setSession(session: DatabaseSession): Promise<void> {\n\t\tawait this.db\n\t\t\t.insert(this.sessionTable)\n\t\t\t.values({\n\t\t\t\tid: session.id,\n\t\t\t\tuserId: session.userId,\n\t\t\t\texpiresAt: Math.floor(session.expiresAt.getTime() / 1000),\n\t\t\t\t...session.attributes\n\t\t\t})\n\t\t\t.run();\n\t}\n\n\tpublic async updateSessionExpiration(sessionId: string, expiresAt: Date): Promise<void> {\n\t\tawait this.db\n\t\t\t.update(this.sessionTable)\n\t\t\t.set({\n\t\t\t\texpiresAt: Math.floor(expiresAt.getTime() / 1000)\n\t\t\t})\n\t\t\t.where(eq(this.sessionTable.id, sessionId))\n\t\t\t.run();\n\t}\n\n\tpublic async deleteExpiredSessions(): Promise<void> {\n\t\tawait this.db\n\t\t\t.delete(this.sessionTable)\n\t\t\t.where(lte(this.sessionTable.expiresAt, Math.floor(Date.now() / 1000)));\n\t}\n}\n\nexport type SQLiteUserTable = SQLiteTableWithColumns<{\n\tdialect: \"sqlite\";\n\tcolumns: {\n\t\tid: SQLiteColumn<\n\t\t\t{\n\t\t\t\tname: any;\n\t\t\t\ttableName: any;\n\t\t\t\tdataType: any;\n\t\t\t\tcolumnType: any;\n\t\t\t\tdata: string;\n\t\t\t\tdriverParam: any;\n\t\t\t\tnotNull: true;\n\t\t\t\thasDefault: boolean; // must be boolean instead of any to allow default values\n\t\t\t\tenumValues: any;\n\t\t\t\tbaseColumn: any;\n\t\t\t},\n\t\t\tobject\n\t\t>;\n\t};\n\tschema: any;\n\tname: any;\n}>;\n\nexport type SQLiteSessionTable = SQLiteTableWithColumns<{\n\tdialect: any;\n\tcolumns: {\n\t\tid: SQLiteColumn<\n\t\t\t{\n\t\t\t\tdataType: any;\n\t\t\t\tnotNull: true;\n\t\t\t\tenumValues: any;\n\t\t\t\ttableName: any;\n\t\t\t\tcolumnType: any;\n\t\t\t\tdata: string;\n\t\t\t\tdriverParam: any;\n\t\t\t\thasDefault: false;\n\t\t\t\tname: any;\n\t\t\t},\n\t\t\tobject\n\t\t>;\n\t\texpiresAt: SQLiteColumn<\n\t\t\t{\n\t\t\t\tdataType: \"number\";\n\t\t\t\tnotNull: true;\n\t\t\t\tenumValues: any;\n\t\t\t\ttableName: any;\n\t\t\t\tcolumnType: any;\n\t\t\t\tdata: number;\n\t\t\t\tdriverParam: any;\n\t\t\t\thasDefault: false;\n\t\t\t\tname: any;\n\t\t\t},\n\t\t\tobject\n\t\t>;\n\t\tuserId: SQLiteColumn<\n\t\t\t{\n\t\t\t\tdataType: \"string\";\n\t\t\t\tnotNull: true;\n\t\t\t\tenumValues: any;\n\t\t\t\ttableName: any;\n\t\t\t\tcolumnType: any;\n\t\t\t\tdata: string;\n\t\t\t\tdriverParam: any;\n\t\t\t\thasDefault: false;\n\t\t\t\tname: any;\n\t\t\t},\n\t\t\tobject\n\t\t>;\n\t};\n\tschema: any;\n\tname: any;\n}>;\n\nfunction transformIntoDatabaseSession(raw: InferSelectModel<SQLiteSessionTable>): DatabaseSession {\n\tconst { id, userId, expiresAt: expiresAtUnix, ...attributes } = raw;\n\treturn {\n\t\tuserId,\n\t\tid,\n\t\texpiresAt: new Date(expiresAtUnix * 1000),\n\t\tattributes\n\t};\n}\n\nfunction transformIntoDatabaseUser(raw: InferSelectModel<SQLiteUserTable>): DatabaseUser {\n\tconst { id, ...attributes } = raw;\n\treturn {\n\t\tid,\n\t\tattributes\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAwB;AAUjB,MAAM,qBAAwC;AAAA,EAC5C;AAAA,EAEA;AAAA,EACA;AAAA,EAER,YACC,IACA,cACA,WACC;AACD,SAAK,KAAK;AACV,SAAK,eAAe;AACpB,SAAK,YAAY;AAAA,EAClB;AAAA,EAEA,MAAa,cAAc,WAAkC;AAC5D,UAAM,KAAK,GAAG,OAAO,KAAK,YAAY,EAAE,UAAM,uBAAG,KAAK,aAAa,IAAI,SAAS,CAAC;AAAA,EAClF;AAAA,EAEA,MAAa,mBAAmB,QAA+B;AAC9D,UAAM,KAAK,GAAG,OAAO,KAAK,YAAY,EAAE,UAAM,uBAAG,KAAK,aAAa,QAAQ,MAAM,CAAC;AAAA,EACnF;AAAA,EAEA,MAAa,kBACZ,WACwE;AACxE,UAAM,SAAS,MAAM,KAAK,GACxB,OAAO;AAAA,MACP,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,IACf,CAAC,EACA,KAAK,KAAK,YAAY,EACtB,UAAU,KAAK,eAAW,uBAAG,KAAK,aAAa,QAAQ,KAAK,UAAU,EAAE,CAAC,EACzE,UAAM,uBAAG,KAAK,aAAa,IAAI,SAAS,CAAC,EACzC,IAAI;AACN,QAAI,CAAC;AAAQ,aAAO,CAAC,MAAM,IAAI;AAC/B,WAAO;AAAA,MACN,6BAA6B,OAAO,OAAO;AAAA,MAC3C,0BAA0B,OAAO,IAAI;AAAA,IACtC;AAAA,EACD;AAAA,EAEA,MAAa,gBAAgB,QAA4C;AACxE,UAAM,SAAS,MAAM,KAAK,GACxB,OAAO,EACP,KAAK,KAAK,YAAY,EACtB,UAAM,uBAAG,KAAK,aAAa,QAAQ,MAAM,CAAC,EAC1C,IAAI;AACN,WAAO,OAAO,IAAI,CAAC,QAAQ;AAC1B,aAAO,6BAA6B,GAAG;AAAA,IACxC,CAAC;AAAA,EACF;AAAA,EAEA,MAAa,WAAW,SAAyC;AAChE,UAAM,KAAK,GACT,OAAO,KAAK,YAAY,EACxB,OAAO;AAAA,MACP,IAAI,QAAQ;AAAA,MACZ,QAAQ,QAAQ;AAAA,MAChB,WAAW,KAAK,MAAM,QAAQ,UAAU,QAAQ,IAAI,GAAI;AAAA,MACxD,GAAG,QAAQ;AAAA,IACZ,CAAC,EACA,IAAI;AAAA,EACP;AAAA,EAEA,MAAa,wBAAwB,WAAmB,WAAgC;AACvF,UAAM,KAAK,GACT,OAAO,KAAK,YAAY,EACxB,IAAI;AAAA,MACJ,WAAW,KAAK,MAAM,UAAU,QAAQ,IAAI,GAAI;AAAA,IACjD,CAAC,EACA,UAAM,uBAAG,KAAK,aAAa,IAAI,SAAS,CAAC,EACzC,IAAI;AAAA,EACP;AAAA,EAEA,MAAa,wBAAuC;AACnD,UAAM,KAAK,GACT,OAAO,KAAK,YAAY,EACxB,UAAM,wBAAI,KAAK,aAAa,WAAW,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,CAAC,CAAC;AAAA,EACxE;AACD;AA2EA,SAAS,6BAA6B,KAA4D;AACjG,QAAM,EAAE,IAAI,QAAQ,WAAW,eAAe,GAAG,WAAW,IAAI;AAChE,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA,WAAW,IAAI,KAAK,gBAAgB,GAAI;AAAA,IACxC;AAAA,EACD;AACD;AAEA,SAAS,0BAA0B,KAAsD;AACxF,QAAM,EAAE,IAAI,GAAG,WAAW,IAAI;AAC9B,SAAO;AAAA,IACN;AAAA,IACA;AAAA,EACD;AACD;","names":[]}